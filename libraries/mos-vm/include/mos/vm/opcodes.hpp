#pragma once
#include <mos/vm/opcodes_def.hpp>
#include <mos/vm/variant.hpp>

#include <map>

namespace mos { namespace vm {
   enum opcodes {
      MOS_VM_CONTROL_FLOW_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_BR_TABLE_OP(MOS_VM_CREATE_ENUM)
      MOS_VM_RETURN_OP(MOS_VM_CREATE_ENUM)
      MOS_VM_CALL_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_CALL_IMM_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_PARAMETRIC_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_VARIABLE_ACCESS_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_MEMORY_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_I32_CONSTANT_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_I64_CONSTANT_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_F32_CONSTANT_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_F64_CONSTANT_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_COMPARISON_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_NUMERIC_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_CONVERSION_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_EXIT_OP(MOS_VM_CREATE_ENUM)
      MOS_VM_EMPTY_OPS(MOS_VM_CREATE_ENUM)
      MOS_VM_ERROR_OPS(MOS_VM_CREATE_ENUM)
   };
   
   struct opcode_utils {
      std::map<uint16_t, std::string> opcode_map{
         MOS_VM_CONTROL_FLOW_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_BR_TABLE_OP(MOS_VM_CREATE_MAP)
         MOS_VM_RETURN_OP(MOS_VM_CREATE_MAP)
         MOS_VM_CALL_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_CALL_IMM_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_PARAMETRIC_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_VARIABLE_ACCESS_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_MEMORY_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_I32_CONSTANT_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_I64_CONSTANT_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_F32_CONSTANT_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_F64_CONSTANT_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_COMPARISON_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_NUMERIC_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_CONVERSION_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_EXIT_OP(MOS_VM_CREATE_MAP)
         MOS_VM_EMPTY_OPS(MOS_VM_CREATE_MAP)
         MOS_VM_ERROR_OPS(MOS_VM_CREATE_MAP)
      };
   }; 

   enum imm_types {
      none,
      block_imm,
      varuint32_imm,
      br_table_imm,
   };


   MOS_VM_CONTROL_FLOW_OPS(MOS_VM_CREATE_CONTROL_FLOW_TYPES)
   MOS_VM_BR_TABLE_OP(MOS_VM_CREATE_BR_TABLE_TYPE)
   MOS_VM_RETURN_OP(MOS_VM_CREATE_CONTROL_FLOW_TYPES)
   MOS_VM_CALL_OPS(MOS_VM_CREATE_CALL_TYPES)
   MOS_VM_CALL_IMM_OPS(MOS_VM_CREATE_CALL_IMM_TYPES)
   MOS_VM_PARAMETRIC_OPS(MOS_VM_CREATE_TYPES)
   MOS_VM_VARIABLE_ACCESS_OPS(MOS_VM_CREATE_VARIABLE_ACCESS_TYPES)
   MOS_VM_MEMORY_OPS(MOS_VM_CREATE_MEMORY_TYPES)
   MOS_VM_I32_CONSTANT_OPS(MOS_VM_CREATE_I32_CONSTANT_TYPE)
   MOS_VM_I64_CONSTANT_OPS(MOS_VM_CREATE_I64_CONSTANT_TYPE)
   MOS_VM_F32_CONSTANT_OPS(MOS_VM_CREATE_F32_CONSTANT_TYPE)
   MOS_VM_F64_CONSTANT_OPS(MOS_VM_CREATE_F64_CONSTANT_TYPE)
   MOS_VM_COMPARISON_OPS(MOS_VM_CREATE_TYPES)
   MOS_VM_NUMERIC_OPS(MOS_VM_CREATE_TYPES)
   MOS_VM_CONVERSION_OPS(MOS_VM_CREATE_TYPES)
   MOS_VM_EXIT_OP(MOS_VM_CREATE_EXIT_TYPE)
   MOS_VM_EMPTY_OPS(MOS_VM_CREATE_TYPES)
   MOS_VM_ERROR_OPS(MOS_VM_CREATE_TYPES)

   using opcode = variant<
      MOS_VM_CONTROL_FLOW_OPS(MOS_VM_IDENTITY)
      MOS_VM_BR_TABLE_OP(MOS_VM_IDENTITY)
      MOS_VM_RETURN_OP(MOS_VM_IDENTITY)
      MOS_VM_CALL_OPS(MOS_VM_IDENTITY)
      MOS_VM_CALL_IMM_OPS(MOS_VM_IDENTITY)
      MOS_VM_PARAMETRIC_OPS(MOS_VM_IDENTITY)
      MOS_VM_VARIABLE_ACCESS_OPS(MOS_VM_IDENTITY)
      MOS_VM_MEMORY_OPS(MOS_VM_IDENTITY)
      MOS_VM_I32_CONSTANT_OPS(MOS_VM_IDENTITY)
      MOS_VM_I64_CONSTANT_OPS(MOS_VM_IDENTITY)
      MOS_VM_F32_CONSTANT_OPS(MOS_VM_IDENTITY)
      MOS_VM_F64_CONSTANT_OPS(MOS_VM_IDENTITY)
      MOS_VM_COMPARISON_OPS(MOS_VM_IDENTITY)
      MOS_VM_NUMERIC_OPS(MOS_VM_IDENTITY)
      MOS_VM_CONVERSION_OPS(MOS_VM_IDENTITY)
      MOS_VM_EXIT_OP(MOS_VM_IDENTITY)
      MOS_VM_EMPTY_OPS(MOS_VM_IDENTITY)
      MOS_VM_ERROR_OPS(MOS_VM_IDENTITY_END)
      >;
}} // namespace mos::vm
